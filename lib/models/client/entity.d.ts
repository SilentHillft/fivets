import { Entity } from "../common";
import { Vector3 } from "../../utils";
import { ForceType } from "../../enums/force-type";
import { ChangeMe } from "../../change-me.type";
import { Vector4 } from "../../utils/vector4";
import { TraceFlag, TrafficLightState } from "../../enums";
export declare class ClientEntity extends Entity {
    applyForceToCenterOfMass(pos: Vector3, isDirectionRelative?: boolean, isForceRelative?: boolean, forceType?: ForceType): void;
    attachEntity(entity: Entity, boneIndex: number, pos: Vector3, rot: Vector3, useSoftPinning: boolean, hasCollision: boolean, rotationOrder: ChangeMe): void;
    attachEntityPhysically(entity: Entity, boneIndex: number, boneIndex2: number, pos: Vector3, pos2: Vector3, rot: Vector3, breakForce: number, teleport: boolean, fixedRotation?: boolean, hasCollision?: boolean): void;
    clearLastDamageEntity(): void;
    detach(dynamic: boolean, collision: boolean): void;
    haveAnimDirector(): boolean;
    haveDrawable(): boolean;
    havePhysics(): boolean;
    haveSkeletonData(): boolean;
    get alpha(): number;
    getEntityAttachedTo(): ClientEntity;
    canBeDamaged(): boolean;
    getForwardVector(): Vector3;
    getHeight(pos: Vector3, atTop: boolean, inWorldCoords: boolean): number;
    get heightAboveGround(): number;
    get lodDistance(): number;
    get matrix(): Vector3[];
    get headingWithPhysics(): number;
    getPickup(modelHash: ChangeMe): void;
    get pitch(): number;
    get proofs(): [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
    ];
    isBulletproof(): boolean;
    isFireproof(): boolean;
    isExplosionproof(): boolean;
    isCollisionproof(): boolean;
    isMeleeproof(): boolean;
    isSteamproof(): boolean;
    isDrownproof(): boolean;
    get quaternion(): Vector4;
    get roll(): number;
    getSpeedVector(relative: boolean): Vector3;
    get submersionLevel(): number;
    get uprightValue(): number;
    getLastHitMaterialHash(): number;
    hasBeenDamagedByAnyObject(): boolean;
    hasBeenDamagedByAnyPed(): boolean;
    hasBeenDamagedByAnyVehicle(): boolean;
    hasBeenDamagedByEntity(entity: Entity): boolean;
    hasClearLosToEntity(entity: Entity, traceFlags?: TraceFlag): boolean;
    hasCollidedWithAnything(): boolean;
    isMissionEntity(): boolean;
    isPed(): boolean;
    isVehicle(): boolean;
    isObject(): boolean;
    isAtPosition(pos: Vector3, size: Vector3): boolean;
    isAtEntity(entity: Entity, size: Vector3): boolean;
    isAttached(): boolean;
    isAttachedToAnyObject(): boolean;
    isAttachedToAnyPed(): boolean;
    isAttachedToAnyVehicle(): boolean;
    isAttachedToEntity(entity: Entity): boolean;
    isDead(): boolean;
    isInAir(): boolean;
    isInAngledArea(min: Vector3, max: Vector3, width: number, includeZ?: boolean, debug?: boolean): boolean;
    isInArea(min: Vector3, max: Vector3): boolean;
    isInWater(): boolean;
    isInZone(zone: string): boolean;
    isOccluded(): boolean;
    isOnScreen(): boolean;
    isStatic(): boolean;
    isTouchingEntity(entity: Entity): boolean;
    isTouchingModel(modelHash: number): boolean;
    isUpright(angle?: number): boolean;
    isUpsideDown(): boolean;
    isVisibleToScript(): boolean;
    isWaitingForWorldCollision(): boolean;
    playAnimation(animName: string, animDict: string, loop: boolean, stayInAnim: boolean, delta?: number, bitset?: number): void;
    updateAttachments(): void;
    resetAlpha(): void;
    setCanAutoVault(toggle: boolean): void;
    setCanClimbOnEntity(toggle: boolean): void;
    setAlpha(alpha: number, affectSkin: boolean): void;
    setAlwaysPrerender(toggle: boolean): void;
    setAngularVelocity(velocity: Vector3): void;
    setAnimationDuration(animDict: string, animName: string, time: number): void;
    setAnimationSpeed(animDict: string, animName: string, speedMultiplier: number): void;
    setAsMissionEntity(p1: boolean, p2: boolean): void;
    setAsNoLongerNeeded(): void;
    setCanBeDamaged(toggle: boolean): void;
    setCanBeDamagedByRelationshipGroup(group: number, toggle: boolean): void;
    setCanBeTargetedWithoutLos(toggle: boolean): void;
    setCleanupByEngine(toggle: boolean): void;
    setCollision(toggle: boolean, keepPhysics?: boolean): void;
    setCompletelyDisableCollision(toggle: boolean, keepPhysics?: boolean): void;
    setDecalsDisabled(toggle: boolean): void;
    setDynamic(toggle: boolean): void;
    setHasGravity(toggle: boolean): void;
    setHealth(health: number): void;
    setInvincible(toggle: boolean): void;
    setLights(toggle: boolean): void;
    setLoadCollisionFlag(toggle: boolean): void;
    setLodDistance(distance: number): void;
    setMaxHealth(maxHealth: number): void;
    setMaxSpeed(speed: number): void;
    setMotionBlur(toggle: boolean): void;
    disableCollisionWithEntity(entity: Entity, oneFrameOnly?: boolean): void;
    setDamageOnlyByPlayer(toggle: boolean): void;
    setDamageOnlyByRelationshipGroup(toggle: boolean, groupHash: string | number): void;
    setBulletproof(toggle: boolean): void;
    setFireproof(toggle: boolean): void;
    setExplosionproof(toggle: boolean): void;
    setCollisionproof(toggle: boolean): void;
    setMeleeproof(toggle: boolean): void;
    setSteamproof(toggle: boolean): void;
    setDrownproof(toggle: boolean): void;
    setQuaternion(vector: Vector4): void;
    setRecordsCollisions(toggle: boolean): void;
    renderScorched(toggle: boolean): void;
    setTrafficLight(state: TrafficLightState): void;
    resetTrafficLight(): void;
    setVisible(visible: boolean): void;
    wouldBeOccluded(modelHash: number, vector: Vector3, p4: boolean): boolean;
    setPositionNoOffset(pos: Vector3, alive?: boolean, ragdollFlag?: boolean): void;
    hasCollisionLoadedAround(): boolean;
}
