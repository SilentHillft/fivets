import { Entity } from "../entity";
import { Vector3 } from "../../utils";
import { PedBoneCollection } from "./ped-bone-collection";
import { DrivingStyle, HelmetType, RagdollType, SpeechModifier, VehicleSeat } from "../../enums";
import { WeaponHash } from "../../hashes";
import { Vehicle } from "../vehicle";
export declare class Ped extends Entity {
    private readonly speechModifierNames;
    private pedBones;
    constructor(handle: number);
    get health(): number;
    setHealth(val: number): void;
    get maxHealth(): number;
    setMaxHealth(val: number): void;
    get currentVehicle(): Vehicle;
    get lastVehicle(): Vehicle;
    get vehicleTryingToEnter(): Vehicle;
    isJumpingOutOfVehicle(): boolean;
    setStayInVehicleWhenJacked(val: boolean): void;
    setMaxDrivingSpeed(val: number): void;
    isHuman(): boolean;
    setIsEnemy(val: boolean): void;
    setPriorityTargetForEnemies(val: boolean): void;
    isPlayer(): boolean;
    isCuffed(): boolean;
    isWearingHelmet(): boolean;
    isRagdoll(): boolean;
    isIdle(): boolean;
    isProne(): boolean;
    isDucking(): boolean;
    isGettingUp(): boolean;
    isClimbing(): boolean;
    isJumping(): boolean;
    isFalling(): boolean;
    isStopped(): boolean;
    isWalking(): boolean;
    isRunning(): boolean;
    isSprinting(): boolean;
    isDiving(): boolean;
    isParachuteFreeFalling(): boolean;
    isSwimming(): boolean;
    isSwimmingUnderWater(): boolean;
    isVaulting(): boolean;
    isOnBike(): boolean;
    isOnFoot(): boolean;
    isInSub(): boolean;
    isInTaxi(): boolean;
    isInTrain(): boolean;
    isInHeli(): boolean;
    isInPlane(): boolean;
    isInFlyingVehicle(): boolean;
    isInBoat(): boolean;
    isInPoliceVehicle(): boolean;
    isJacking(): boolean;
    isBeingJacked(): boolean;
    isGettingIntoVehicle(): boolean;
    isTryingToEnterLockedVehicle(): boolean;
    isInjured(): boolean;
    isFleeing(): boolean;
    isInCombat(): boolean;
    isInMeleeCombat(): boolean;
    isInStealthMode(): boolean;
    isAmbientSpeechPlaying(): boolean;
    isScriptedSpeechPlaying(): boolean;
    isAnySpeechPlaying(): boolean;
    isAmbientSpeechEnabled(): boolean;
    setPainAudioEnabled(val: number): void;
    isPlantingBomb(): boolean;
    isShooting(): boolean;
    isReloading(): boolean;
    isDoingDriveby(): boolean;
    isGoingIntoCover(): boolean;
    isBeingStunned(): boolean;
    isBeingStealthKilled(): boolean;
    isPerformingStealthKill(): boolean;
    isAimingFromCover(): boolean;
    isInCover(expectUseWeapon?: boolean): boolean;
    isInCoverFacingLeft(): boolean;
    setFiringPattern(val: number): void;
    setWeaponsDropOnDeath(val: boolean): void;
    setDrivingSpeed(val: number): void;
    setDrivingStyle(style: DrivingStyle): void;
    isInAnyVehicle(): boolean;
    isInVehicle(vehicle: Vehicle): boolean;
    isSittingInAnyVehicle(): boolean;
    isSittingInVehicle(vehicle: Vehicle): boolean;
    placeIntoVehicle(vehicle: Vehicle, seat: VehicleSeat): void;
    isInCombatAgainst(target: Ped): boolean;
    getJacker(): Ped;
    getJackTarget(): Ped;
    getMeleeTarget(): Ped;
    kill(): void;
    resurrect(): void;
    clearTasks(): void;
    resetVisibleDamage(): void;
    clearBloodDamage(): void;
    isInAnyGroup(): boolean;
    setPersistentGroup(val: boolean): void;
    leaveGroup(): void;
    playAmbientSpeech(speechName: string, voiceName?: string, modifier?: SpeechModifier): void;
    applyDamage(val: number): void;
    hasBeenDamagedByWeapon(weapon: WeaponHash): boolean;
    hasBeenDamagedByAnyWeapon(): boolean;
    hasBeenDamagedByAnyMeleeWeapon(): boolean;
    clearLastWeaponDamage(): void;
    getBones(): PedBoneCollection;
    giveWeapon(weapon: WeaponHash, ammo?: number, isHidden?: boolean, equipNow?: boolean): void;
    removeWeapon(weapon: WeaponHash): void;
    removeAllWeapons(): void;
    getLastWeaponImpactPosition(): Vector3;
    canRagdoll(): boolean;
    setCanRagdoll(val: boolean): void;
    ragdoll(duration?: number, ragdollType?: RagdollType): void;
    cancelRagdoll(): void;
    giveHelmet(canBeRemovedByPed: boolean, helmetType: HelmetType, textureIndex: number): void;
    removeHelmet(instantly: boolean): void;
    openParachute(): void;
    getConfigFlag(flagId: number): void;
    setConfigFlag(flagId: number, val: boolean): void;
    resetConfigFlag(flagId: number): void;
    clone(headingYaw: number): void;
    exists(ped?: Ped): any;
}
